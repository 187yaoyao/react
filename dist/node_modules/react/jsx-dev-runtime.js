(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-dev-runtime"] = global["jsx-dev-runtime"] || {}, global["jsx-dev-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

	const REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for
	    ? Symbol.for('ReactElement')
	    : 0xebac;

	/* eslint-disable @typescript-eslint/no-explicit-any */
	/* eslint-disable prettier/prettier */
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$type: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'tangyao'
	    };
	    return element;
	};
	const jsx = (type, config, ...children) => {
	    let key = null, ref = null;
	    const props = {};
	    for (const prop in config) {
	        if (prop === 'key') {
	            if (config[prop] !== void 0) {
	                key = config[prop];
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (config[prop] !== void 0) {
	                ref = config[prop];
	            }
	            continue;
	        }
	        if (Object.prototype.hasOwnProperty.call(config, prop)) {
	            props[prop] = config[prop];
	        }
	    }
	    const childrenElementLength = children.length;
	    if (childrenElementLength) {
	        if (childrenElementLength === 1) {
	            props.children = children[0];
	        }
	        else {
	            props.children = children;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	const jsxDEV = (type, config) => {
	    let key = null, ref = null;
	    const props = {};
	    for (const prop in config) {
	        if (prop === 'key') {
	            if (config[prop] !== void 0) {
	                key = config[prop];
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (config[prop] !== void 0) {
	                ref = config[prop];
	            }
	            continue;
	        }
	        if (Object.prototype.hasOwnProperty.call(config, prop)) {
	            props[prop] = config[prop];
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
